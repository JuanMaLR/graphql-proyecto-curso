type Query {
    #El argumento lo damos nosotros en el GraphQL playground
    #Signo de admiracion indica que no puede ser null, que debe regresarme un valor
    hello(name: String): String! #Así es como se hace una query con argumentos
    quantity: Int!
    #getUser: User! #Este es un tipo custom
    user(id: ID): [User!]! #Me va a regresar un array no nulo de usuarios no nulos
    author(id: ID): [Author!]! 
    book(id: ID): [Book!]!
}
#Los tipos de datos que hay son escalares y custom
#Los escalares son: Int, Float, String, Boolean y ID

#Aquí se definen los tipos custom
type User {
    id: ID!
    name: String!
    lastName: String!
    email: String!
}

type Author {
    id: ID!
    name: String!
    country: String!
    register_by: User!
    books: [Book!]!
}

type Book {
    id: ID!
    title: String!
    description: String!
    quantity: Int!
    price: Int!
    writted_by: Author!
    register_by: User!
}

type Mutation {
    createUser(data: createUserInput): User!
    updateUser(id: ID!, data: updateUserInput): User!
    createAuthor(data: createAuthorInput): Author!
    updateAuthor(id: ID!, data: updateAuthorInput): Author!
    createBook(data: createBookInput): Book!
    updateBook(id: ID!, data: updateBookInput): Book!
    deleteBook(id: ID!): Book!
}

type Subscription {
    count: Int!
    author: AuthorSubscriptionPayload!
    book(authorId: ID!): BookSubscriptionPayload!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

type AuthorSubscriptionPayload {
    mutation: MutationType!
    data: Author!
}

type BookSubscriptionPayload {
    mutation: MutationType!
    data: Book!
}

input createUserInput {
    name: String!
    lastName: String!
    email: String!
    password: String!
}

input updateUserInput {
    name: String
    lastName: String
    email: String
    password: String
}

input createAuthorInput {
    name: String!
    country: String!
    register_by: ID!
}

input updateAuthorInput {
    name: String
    country: String
    register_by: ID
}

input createBookInput {
    title: String!
    description: String!
    quantity: Int!
    price: Int!
    writted_by: ID!
    register_by: ID!
}

input updateBookInput {
    title: String
    description: String
    quantity: Int
    price: Int
    writted_by: ID
    register_by: ID
}